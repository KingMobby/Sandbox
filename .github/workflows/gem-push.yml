name: Ruby Gem

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build + Publish
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v3
    - name: Set up Ruby 2.6
    # To automatically get bug fixes and new Ruby versions for ruby/setup-ruby,
    # change this to (see https://github.com/ruby/setup-ruby#versioning):
    # uses: ruby/setup-ruby@v1
      uses: ruby/setup-ruby@55283cc23133118229fd3f97f9336ee23a179fcf # v1.146.0
      with:
        ruby-version: 2.6.x

    - name: Publish to GPR
      run: |
        mkdir -p $HOME/.gem
        touch $HOME/.gem/credentials
        chmod 0600 $HOME/.gem/credentials
        printf -- "---\n:github: ${GEM_HOST_API_KEY}\n" > $HOME/.gem/credentials
        gem build *.gemspec
        gem push --KEY github --host https://rubygems.pkg.github.com/${OWNER} *.gem
      env:
        GEM_HOST_API_KEY: "Bearer ${{secrets.GITHUB_TOKEN}}"
        OWNER: ${{ github.repository_owner }}

    - name: Publish to RubyGems
      run: |
        mkdir -p $HOME/.gem
        touch $HOME/.gem/credentials
        chmod 0600 $HOME/.gem/credentials
        printf -- "---\n:rubygems_api_key: ${GEM_HOST_API_KEY}\n" > $HOME/.gem/credentials
        gem build *.gemspec
        gem push *.gem
      env:
        GEM_HOST_API_KEY: "${{secrets.RUBYGEMS_AUTH_TOKEN}}"
- Name: Setup Node.js-Umgebung Verwendung: actions/setup-node@v4.0.2 mit: # Setzen Sie always-auth in npmrc. always-auth: # optional, Standard ist falsch # Versionsspezifikation der zu verwendenden Version. Beispiele: 12.x, 10.15.1, >=10.15.0. Knoten-Version: # optional # Datei mit der Versionsspezifikation der zu verwendenden Version. Beispiele: package.json, .nvmrc, .node-version, .tool-versions. node-version-file: # optional # Zielarchitektur für Node zu verwenden. Beispiele: x86, x64. Wird standardmäßig die Systemarchitektur verwenden. Architektur: # optional # Legen Sie diese Option fest, wenn Sie möchten, dass die Aktion nach der neuesten verfügbaren Version prüft, die der Versionsspezifikation entspricht. check-latest: # optional # Optionale Registrierung zum Einrichten für die Auth. Legt die Registrierung in einer .npmrc- und .yarnrc-Datei auf Projektebene fest und richt die Auth zum Lesen von env.NODE_AUTH_TOKEN ein. registry-url: # optional # Optionaler Geltungsbereich für die Authentifizierung bei gedeckten Registern. Wird auf den Repository-Eigentümer zurückfallen, wenn Sie die GitHub-Paketregistrierung verwenden (https://npm.pkg.github.com/). Umfang: # optional # Wird verwendet, um Knotenverteilungen aus Knotenversionen abzuziehen. Da es einen Standardwert gibt, wird dies in der Regel nicht vom Benutzer bereitgestellt. Wenn diese Aktion auf github.com ausgeführt wird, ist der Standardwert ausreichend. Wenn Sie auf GHES laufen, können Sie ein persönliches Zugriffstoken für github.com übergeben, wenn Sie eine Geschwindigkeitsbegrenzung haben. Token: # optional, Standard ist ${{ github.server_url == 'https://github.com' && github.token || '' }} # Wird verwendet, um einen Paketmanager für das Caching im Standardverzeichnis anzugeben. Unterstützte Werte: npm, yarn, pnpm. Cache: # optional # Wird verwendet, um den Pfad zu einer Abhängigkeitsdatei anzugeben: package-lock.json, yarn.lock usw. Unterstützt Platzhalter oder eine Liste von Dateinamen zum Zwischenspeichern mehrerer Abhängigkeiten. Cache-Abhängigkeits-Pfad: # optional 
